from datetime import datetime
from database.types import Lessons

from babel.dates import format_date

from config import LIFETIME_INDEX

from loader import database

import locale

from .designations import *

async def get_week_type(date: datetime) -> str:
    # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–µ–¥–µ–ª—è, –Ω–æ —Ç–∞–∫–æ–π –í–£–ó :)
    if date.isocalendar().week % 2 != 0:
        return "even"
    else:
        return "odd"

def get_format_date(date: datetime):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –¥–∞—Ç—É –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ
    day_of_week = date.strftime('%A')  # –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    day_and_month = format_date(date, "d MMMM", locale='ru_RU')  # –ß–∏—Å–ª–æ –∏ –º–µ—Å—è—Ü –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ

    # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    russian_date = f"{day_of_week} | {day_and_month}"

    return russian_date.title()
    
def get_weekday(date: datetime):
    weekday_number = date.weekday()
    
    return days_of_week[weekday_number]

def get_icons(lesson_type: str) -> str:
        icons = []
        
        if lesson_type:
            lesson_type = lesson_type.lower()
            if "–ª–µ–∫—Ü" in lesson_type:
                icons.append(lesson_type_icons.get("–õ–µ–∫—Ü–∏—è"))
            if "–ø—Ä–∞–∫" in lesson_type:
                icons.append(lesson_type_icons.get("–ü—Ä–∞–∫—Ç–∏–∫–∞"))
            if "–ª–∞–±" in lesson_type:
                icons.append(lesson_type_icons.get("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è"))
            if "–∫/–ø" in lesson_type or "–∫\\–ø" in lesson_type:
                icons.append(lesson_type_icons.get("–ö/–ü"))
            if "–∫/—Ä" in lesson_type or "–∫\\—Ä" in lesson_type:
                icons.append(lesson_type_icons.get("–ö/–†"))

        return " / ".join(icons)

import json

def replace_nth_space(s, n, new_char) -> str:
    count = 0
    s_list = list(s)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω—è—Ç—å —Å–∏–º–≤–æ–ª—ã

    for i, char in enumerate(s_list):
        if char == ' ':
            count += 1
            if count == n:
                s_list[i] = new_char
                break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã

    return ''.join(s_list)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É

async def format_timetable(lessons: dict[Lessons]) -> str:
    lessons_list = []
    for lesson_number, lesson in lessons.items():
        lesson: Lessons
        # –ò–∫–æ–Ω–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è —Ä—è–¥–æ–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º (–ü—Ä–∞–∫—Ç–∏–∫–∞, –õ–µ–∫—Ü–∏—è, –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è, –ö/–ü, –ö/–†)
        icons = get_icons(lesson['lesson_type'])
        
        lesson['name'] = lesson['name'].capitalize()
        
        # –ò–Ω–∞—á–µ –∏–∫–æ–Ω–∫–∏ —Å–ª–∞–∑—è—Ç –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–æ–∫—É –∏ –Ω–µ–∫—Ä–∞—Å–∏–≤–æ
        # –ù—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å
        if len(lesson['name']) > 25:
            if lesson['name'].count(" ") <= 2:
                lesson['name'] = lesson['name'].replace(" ", "\n\t\t\t\t", 1)
            elif lesson['name'].count(" ") > 2 and lesson['name'].count(" ") < 4:
                lesson['name'] = replace_nth_space(lesson['name'], 2, "\n\t\t\t\t")
            elif lesson['name'].count(" ") >= 4:
                lesson['name'] = replace_nth_space(lesson['name'], 2, "\n\t\t\t\t")
                lesson['name'] = replace_nth_space(lesson['name'], 4, "\n\t\t\t\t")
            
            
        base_lesson = [
            f"<b>{lesson_number}. {lesson['name']}</b> {icons}",
            lessons_time.get(lesson_number, "‚ùå")
        ]   
        if lesson['tutor']:
            base_lesson.append(f"<code>{lesson['tutor']}</code>")
        if lesson['location']:
            base_lesson.append(f"üìç {lesson['location']}")
        lessons_list.append("\n\t\t\t\t".join(base_lesson))
    
    return "\n\n".join(lessons_list)

def get_header(date: datetime) -> str:
        format_date = get_format_date(date)
        if date.date() == datetime.now().date():
            format_date = f'üìå {format_date}'
        else:
            format_date = f'üîò {format_date}'
        
        return format_date
 
async def get_day_timetable(group: str, date: datetime):
    week_type = await get_week_type(date)
    # –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
    timetable_data = await database.schedule.get_lessons_for_day(
        group=group,
        week_type=week_type,
        day=get_weekday(date),
        lifetime_index=LIFETIME_INDEX
    )
    
    if timetable_data:
        timetable = await format_timetable(json.loads(timetable_data))
    else:
        timetable = "\t\t\t\t<code>–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç</code>"
    
    # –ü–æ–ª—É—á–∏—Ç—å —à–∞–ø–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ‚Äî üìå –ß–µ—Ç–≤–µ—Ä–≥ | 7 –Ø–Ω–≤–∞—Ä—è
    header = get_header(date)
    
    week_icon = week_types.get(week_type).split(" ")[0]
    
    return f"{week_icon} <b>–ì—Ä—É–ø–ø–∞ {group}</b>\n\n{header}\n\n{timetable}"
    
async def get_week_timetable(group: str, week_type: str):
    result = []

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    for day in days_of_week.values():
        timetable_data = await database.schedule.get_lessons_for_day(
            group=group,
            week_type=week_type,
            day=day,
            lifetime_index=LIFETIME_INDEX
        )
        
        if timetable_data:
            timetable = await format_timetable(json.loads(timetable_data))
        else:
            timetable = "<code>–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç</code>"
        
        rus_day = rus_days_of_week[day]
        result.append(f"üîò {rus_day}\n\n{timetable}")
    
    timetable = "\n\n".join(result)
    
    week_icon = week_types.get(week_type).split(" ")[0]
    
    return f"{week_icon} <b>–ì—Ä—É–ø–ø–∞ {group}</b>\n\n{timetable}"